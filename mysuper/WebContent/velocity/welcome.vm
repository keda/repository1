<STYLE type="text/css">
	.x-grid-row-over .x-grid-cell-inner { 
		font-weight: bold; 
	}
</STYLE>
<h3>欢迎使用Velocity @${currTime}</h3>
<hr>
<div id="data-cnt"></div>
<script type="text/javascript">
  
  Ext.onReady(function(){
  	
	Ext.QuickTips.init(); 
  	
	//extjs grid
	Ext.define('TaoTracerMessage', {
        extend: 'Ext.data.Model',
        fields: [
           {name: 'id'},
           {name: 'infoName'},
           {name: 'infoUrl', convert: function(v){return !v ? '' : v;}},
           {name: 'clientIp'},
		   {name: 'clientPort'},
           {name: 'infoDate'},
		   {name: 'timestamp'}
        ],
        idProperty: 'id'
    });

	/**
     * Custom function used for column renderer
     * @param {Object} val
     */
    function change(val) {
        if (val > 0) {
            return '<span style="color:green;">' + val + '</span>';
        } else if (val < 0) {
            return '<span style="color:red;">' + val + '</span>';
        }
        return val;
    }

    /**
     * Custom function used for column renderer
     * @param {Object} val
     */
    function pctChange(val) {
        if (val > 0) {
            return '<span style="color:green;">' + val + '%</span>';
        } else if (val < 0) {
            return '<span style="color:red;">' + val + '%</span>';
        }
        return val;
    }
	// create the data store
    var store = Ext.create('Ext.data.JsonStore', {
        pageSize: 30,
		storeId: 'storeForMsg',
		model: 'TaoTracerMessage',
        remoteSort: false,
		proxy: {
			type: 'ajax',
            url: '$contextPath/taobao/tracer/query.do',
            reader: {
                type: 'json',
                root: 'data',
                idProperty: 'id',
				totalProperty: 'total'
            }
		}
		
    });
	
	// create the Grid
    var grid = Ext.create('Ext.grid.Panel', {
		store: Ext.getStore('storeForMsg'),
        stateful: true,
        ##collapsible: true,
		##columnLines: true,
		##draggable: true,
        multiSelect: true,
        stateId: 'stateGrid',
        columns: [{
                xtype    : 'rownumberer',
                width    : 40,
                sortable : false
            },
            {
                text     : 'ID',
				width    : 60,
				type     : 'int',
                dataIndex: 'id'
            },
            {
                text     : 'InfoName',
                dataIndex: 'infoName',
				width    : 80,
				field: {xtype: 'textfield', allowBlank: false}
            },
            {
				text     : 'InfoUrl',
                width    : 430,
                dataIndex: 'infoUrl',
				renderer : function(url) {
					return Ext.String.format('<a href="{0}" style="color: #000;" target="_black">{1}</a>', url, url);
				},
				field    : 'textfield'
            },
            {
                text     : 'ReqClient',
				width    : 120,
				xtype    : 'templatecolumn',
				tpl      : '{clientIp} [{clientPort}]'
            },
            {
                text     : 'InfoDate',
                width    : 150,
                dataIndex: 'infoDate'
            },
            {
                text     : 'Timestamp',
                dataIndex: 'timestamp',
				sortable : true
            }
        ],
		selType: 'rowmodel', //rowmodel: select row, cellmodel: select cell
        plugins: [
            Ext.create('Ext.grid.plugin.RowEditing', {
                clicksToEdit: 2 //1:stand for click, 2:stand for double-click
            })
        ],
		
		features: [{ftype:'grouping'}],
		
		listeners: {
			'cellclick': function(view, td, cellIndex, record, tr, rowIndex){
				Ext.MessageBox.alert('消息', this.columns[cellIndex].text+' : '+td.innerText, function(){
					Ext.Msg.alert('Msg', '我是这个时候执行的...');
				});
			}
			#*提示框
			'itemmouseenter': function(view, record, item, index){
							
				Ext.create('Ext.tip.ToolTip', {
        			target    : view.el,
					maxWidth  : 800,
        			delegate  : view.itemSelector,
        			trackMouse: true,
        			renderTo  : Ext.getBody(),
        			listeners : {
        				 'beforeshow': function updateTipBody(tip){
        				 	tip.update(view.getRecord(tip.triggerElement).get("infoUrl"));
        				 }
        			}
        		});
			}
			*#
		},
		
        height: 600,
        ##width: 600,
        ##title: '你的访问记录',
        renderTo: 'data-cnt',
		dockedItems: [{
			##baseCls: 'xyz',
            xtype: 'pagingtoolbar',
            store: store,   // same store GridPanel is using
            pageSize: store.pageSize,
			dock: 'bottom',
			displayInfo: true,
			displayMsg: '当前显示{0}-{1}&nbsp;&nbsp;共{2}条',
			emptyMsg: '暂无数据',
			beforePageText: '第',
			afterPageText: '页,共{0}页',
			prevText: '上一页',
			nextText: '下一页',
			firstText: '第一页',
			lastText: '最后一页',
			refreshText: '刷新',
			plugins: Ext.create('Ext.ux.ProgressBarPager', {})
        }],
		viewConfig: {
            stripeRows: true,
            enableTextSelection: true
        }
		
    });
	#*
	grid.getView().on('itemmouseenter', function(view){
		view.tip = Ext.create('Ext.tip.ToolTip', {
			target    : view.el,
			delegate  : view.itemSelector,
			trackMouse: true,
			renderTo  : Ext.getBody(),
			listeners : {
				 beforeshow: function updateTipBody(tip){
				 	tip.update(view.getRecord(tip.triggerElement).get("infoUrl"));
				 }
			}
		});
	});
	*#
	store.loadPage(1);
	
  });
</script>
